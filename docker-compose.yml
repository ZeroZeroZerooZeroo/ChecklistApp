services:
  postgres:
    image: postgres:17
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME:-checklist}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - checklist-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-checklist}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  databaseservice:
    build:
      context: .
      dockerfile: DataBaseService/Dockerfile
    env_file:
      - .env
    environment:
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${DB_NAME:-checklist}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_TTL: ${REDIS_TTL:-3600}
      GRPC_PORT: ${GRPC_PORT:-50051}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "50051:50051"
    networks:
      - checklist-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./.env:/app/.env:ro

  redis:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - checklist-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - checklist-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo stat | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
    networks:
      - checklist-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  apiservice:
    build:
      context: .
      dockerfile: APIService/Dockerfile
    env_file:
      - .env
    environment:
      SERVER_HOST: ${SERVER_HOST:-0.0.0.0}
      SERVER_PORT: ${SERVER_PORT:-8080}
      GRPC_HOST: ${GRPC_HOST:-databaseservice}
      GRPC_PORT: ${GRPC_PORT:-50051}
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-user-actions}
    depends_on:
      databaseservice:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - checklist-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./.env:/app/.env:ro  

  kafkaservice:
    build:
      context: .
      dockerfile: KafkaService/Dockerfile
    env_file:
      - .env
    environment:
      KAFKA_BROKERS: ${KAFKA_BROKERS:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-user-actions}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID:-checklist-group}
      LOG_FILE_PATH: ${LOG_FILE_PATH:-/root/logs/app.log}
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - kafka_logs:/root/logs
      - ./.env:/app/.env:ro  
    networks:
      - checklist-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep [k]afka-service || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_logs:
    driver: local

networks:
  checklist-network:
    driver: bridge
    name: checklist-network